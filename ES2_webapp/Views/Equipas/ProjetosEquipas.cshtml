@model List<WebApplication2.DTO.ProjetosEquipasViewModel>

@{
    ViewData["Title"] = "Projetos da Equipa";
    // Capturamos o ID da equipa da query string (?idEquipa=…)
    var idEquipa = Context.Request.Query["idEquipa"].ToString();
}

<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Equipa @idEquipa</title>

    <!-- Font Awesome e Google Fonts (opcional para ícones e fontes) -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />

    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body {
            font-family: 'Inter', sans-serif;
            background-color: #ffffff;
            color: #000;
        }
        .container {
            width: 100%;
            max-width: 1200px;
            padding: 40px 20px;
            margin: 0 auto;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 30px;
        }
        .header h2 {
            font-size: 2rem;
            font-weight: 600;
            color: #198754;
        }
        .project-list {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        .project-item {
            background-color: #f9fbff;
            border: 1px solid #d8e2ef;
            border-left: 6px solid #198754;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        .project-item:hover {
            transform: scale(1.015);
            box-shadow: 0 6px 24px rgba(25, 135, 84, 0.15);
        }
        .project-item strong {
            font-size: 1.25rem;
        }
        .project-item span {
            display: block;
            margin-top: 6px;
            font-size: 0.95rem;
            color: #444;
        }
        .actions {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-top: 8px;
        }
        .btn {
            background-color: #198754;
            color: #fff;
            border: none;
            padding: 10px 16px;
            border-radius: 8px;
            font-size: 0.95rem;
            font-weight: 500;
            cursor: pointer;
            display: inline-flex;
            justify-content: center;
            align-items: center;
            gap: 6px;
            transition: background-color 0.2s ease;
            box-shadow: 0 4px 12px rgba(25, 135, 84, 0.2);
        }
        .btn:hover {
            background-color: #157347;
        }
        .cancel-btn {
            background-color: #fff;
            color: #000;
            border: 1px solid #000;
            box-shadow: 0 2px 6px rgba(25, 135, 84, 0.15);
        }
        .cancel-btn:hover {
            background-color: #f0f0f0;
        }
        .fa-pen-to-square,
        .fa-trash {
            font-size: 1.1rem;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        .fa-pen-to-square:hover {
            color: #198754;
            transform: scale(1.2);
        }
        .fa-trash {
            color: #d63031;
        }
        .fa-trash:hover {
            transform: scale(1.2);
        }
        .popup,
        .edit-popup {
            background-color: #ffffff;
            padding: 30px 25px;
            border-radius: 16px;
            position: fixed;
            top: 50%;
            left: 50%;
            width: 90%;
            max-width: 440px;
            transform: translate(-50%, -50%);
            z-index: 20;
            display: none;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.25);
            animation: fadeInScale 0.3s ease-in-out;
            color: #000;
        }
        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            background: rgba(0, 0, 0, 0.4);
            display: none;
            z-index: 10;
        }
        .popup h2,
        .edit-popup h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 20px;
            text-align: center;
        }
        .popup form,
        .edit-popup form {
            display: flex;
            flex-direction: column;
            gap: 16px;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        label {
            font-size: 0.95rem;
            font-weight: 500;
            display: block;
            margin-top: 16px;
        }
        input[type="text"],
        input[type="number"] {
            width: 100%;
            padding: 10px 14px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 1rem;
            background-color: #fff;
            transition: border-color 0.2s ease;
            margin-top: 6px;
        }
        input[type="text"]:focus,
        input[type="number"]:focus {
            border-color: #198754;
            outline: none;
            box-shadow: 0 0 0 2px rgba(25, 135, 84, 0.2);
        }
        .button-group {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .button-group .btn {
            min-width: 120px;
            padding: 10px 20px;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="header">
        <h2><i class="fas fa-folder me-2"></i> Projetos da Equipa @idEquipa</h2>
        <button class="btn" id="createProjectBtn">
            <i class="fa-solid fa-plus"></i> Criar Projeto
        </button>
    </div>
    <div class="project-list" id="projectList">
        @* Esta lista será preenchida pelo JavaScript abaixo *@
    </div>
</div>

<div class="popup-overlay" id="popupOverlay"></div>

<div class="popup" id="popup">
    <h2>Criar Projeto</h2>
    <form id="createProjectForm">
        <label for="nomeProjeto">Nome do Projeto</label>
        <input type="text" id="nomeProjeto" required />

        <label for="nomeCliente">Nome do Cliente</label>
        <input type="text" id="nomeCliente" required />

        <button type="submit" class="btn">Salvar</button>
        <button type="button" class="btn cancel-btn" id="cancelBtn">Cancelar</button>
    </form>
</div>

<div class="edit-popup" id="editPopup">
    <h2>Editar Projeto</h2>
    <form id="editProjectForm">
        <input type="hidden" id="editIdProjeto" />

        <label for="editNomeProjeto">Nome do Projeto</label>
        <input type="text" id="editNomeProjeto" required />

        <label for="editNomeCliente">Nome do Cliente</label>
        <input type="text" id="editNomeCliente" required />

        <button type="submit" class="btn">Atualizar</button>
        <button type="button" class="btn cancel-btn" onclick="fecharEditModal()">Cancelar</button>
    </form>
</div>

<script>
    // Captura idEquipa da query string: ?idEquipa=…
    const equipaId = new URLSearchParams(window.location.search).get('idEquipa');
    let projetos = [];

    // Cria o HTML para um item de projeto
    function criarElementoProjeto(projeto) {
        const div = document.createElement('div');
        div.className = 'project-item';
        div.innerHTML = `
        <strong>${projeto.nomeProjeto}</strong>
        <span>Cliente: ${projeto.nomeCliente}</span>
        <span>Criador: ${projeto.criador}</span>
        <div class="actions">
          <button class="btn" onclick="irParaTarefas(${projeto.idProjeto})">
            <i class="fa-solid fa-list-check"></i> Tarefas
          </button>
          <i class="fa-solid fa-pen-to-square" title="Editar" onclick="abrirEditModal(${projeto.idProjeto})"></i>
          <i class="fa-solid fa-trash" title="Eliminar" onclick="eliminarProjeto(${projeto.idProjeto})"></i>
        </div>`;
        return div;
    }

    // Exibe a lista de projetos na página
    function mostrarProjetos() {
        const divProjetos = document.getElementById('projectList');
        divProjetos.innerHTML = '';
        if (!projetos || projetos.length === 0) {
            divProjetos.innerHTML = '<p>Nenhum projeto encontrado para esta equipa.</p>';
            return;
        }
        projetos.forEach(p => {
            const elemento = criarElementoProjeto(p);
            divProjetos.appendChild(elemento);
        });
    }

    // Abre o modal de “Criar Projeto”
    function abrirModal() {
        document.getElementById('popup').style.display = 'block';
        document.getElementById('popupOverlay').style.display = 'block';
    }

    // Fecha o modal de “Criar Projeto”
    function fecharModal() {
        document.getElementById('popup').style.display = 'none';
        document.getElementById('popupOverlay').style.display = 'none';
        document.getElementById('createProjectForm').reset();
    }

    // Fecha o modal de “Editar Projeto”
    function fecharEditModal() {
        document.getElementById('editPopup').style.display = 'none';
        document.getElementById('popupOverlay').style.display = 'none';
        document.getElementById('editProjectForm').reset();
    }

    // 1) Carrega a lista de projetos desta equipa (chama GET /ProjetoEquipas/PorEquipa/{equipaId})
    async function carregarProjetos() {
        try {
            const res = await fetch(`/ProjetoEquipas/PorEquipa/${equipaId}`);
            if (!res.ok) {
                console.error('Falha ao obter projetos:', res.status, await res.text());
                return;
            }
            projetos = await res.json();
            mostrarProjetos();
        } catch (ex) {
            console.error('Erro ao chamar /ProjetoEquipas/PorEquipa:', ex);
        }
    }

    // 2) Cria um novo projeto na equipa (POST /ProjetoEquipas/CriarProjetoEquipa)
    async function criarProjeto(event) {
        event.preventDefault();
        const nomeProjeto = document.getElementById('nomeProjeto').value.trim();
        const nomeCliente = document.getElementById('nomeCliente').value.trim();
        const payload = {
            Nome: nomeProjeto,
            NomeCliente: nomeCliente,
            EquipaId: parseInt(equipaId, 10)
        };

        try {
            const res = await fetch('/ProjetoEquipas/CriarProjetoEquipa', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!res.ok) {
                console.error('Falha ao criar projeto:', res.status, await res.text());
                return;
            }
            await carregarProjetos();
            fecharModal();
        } catch (ex) {
            console.error('Erro ao chamar /ProjetoEquipas/CriarProjetoEquipa:', ex);
        }
    }

    // 3) Abre o modal de edição e pré‐preenche com os dados do projeto
    function abrirEditModal(idProjeto) {
        const projeto = projetos.find(p => p.idProjeto === idProjeto);
        if (!projeto) return;
        document.getElementById('editIdProjeto').value = projeto.idProjeto;
        document.getElementById('editNomeProjeto').value = projeto.nomeProjeto;
        document.getElementById('editNomeCliente').value = projeto.nomeCliente;
        document.getElementById('editPopup').style.display = 'block';
        document.getElementById('popupOverlay').style.display = 'block';
    }

    // 4) Atualiza um projeto existente (PUT /ProjetoEquipas/AtualizarProjetoEquipa/{id})
    async function atualizarProjeto(event) {
        event.preventDefault();
        const id = document.getElementById('editIdProjeto').value;
        const nomeProjeto = document.getElementById('editNomeProjeto').value.trim();
        const nomeCliente = document.getElementById('editNomeCliente').value.trim();
        const payload = {
            NomeProjeto: nomeProjeto,
            NomeCliente: nomeCliente
        };

        try {
            const res = await fetch(`/ProjetoEquipas/AtualizarProjetoEquipa/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!res.ok) {
                console.error('Falha ao atualizar projeto:', res.status, await res.text());
                return;
            }
            await carregarProjetos();
            fecharEditModal();
        } catch (ex) {
            console.error('Erro ao chamar /ProjetoEquipas/AtualizarProjetoEquipa:', ex);
        }
    }

    // 5) Elimina um projeto da equipa (DELETE /ProjetoEquipas/EliminarProjetoEquipa/{id})
    async function eliminarProjeto(idProjeto) {
        if (!confirm("Tens a certeza que queres eliminar este projeto?")) return;
        try {
            const res = await fetch(`/ProjetoEquipas/EliminarProjetoEquipa/${idProjeto}`, {
                method: 'DELETE'
            });
            if (!res.ok) {
                console.error('Falha ao eliminar projeto:', res.status, await res.text());
                return;
            }
            await carregarProjetos();
        } catch (ex) {
            console.error('Erro ao chamar /ProjetoEquipas/EliminarProjetoEquipa:', ex);
        }
    }

    // 6) Redireciona para página de tarefas do projeto
    function irParaTarefas(idProjeto) {
        window.location.href = `/Tarefas?projetoId=${idProjeto}`;
    }

    // 7) Ligação de eventos e carregamento inicial
    document.getElementById('createProjectBtn').addEventListener('click', abrirModal);
    document.getElementById('cancelBtn').addEventListener('click', fecharModal);
    document.getElementById('popupOverlay').addEventListener('click', () => {
        fecharModal();
        fecharEditModal();
    });
    document.getElementById('createProjectForm').addEventListener('submit', criarProjeto);
    document.getElementById('editProjectForm').addEventListener('submit', atualizarProjeto);

    window.onload = carregarProjetos;
</script>
</body>
</html>
