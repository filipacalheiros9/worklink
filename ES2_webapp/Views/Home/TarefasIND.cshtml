@{
    ViewData["Title"] = "Tarefas Individuais";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
<link href="/css/Tarefas.css" rel="stylesheet" />

<style>
    /* Autocomplete styles */
    .autocomplete {
        position: relative;
        display: inline-block;
        width: 100%;
    }
    .autocomplete-items {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        border: 1px solid #ccc;
        border-top: none;
        z-index: 99;
        background-color: #fff;
        max-height: 200px;
        overflow-y: auto;
    }
    .autocomplete-item {
        padding: 8px;
        cursor: pointer;
    }
    .autocomplete-item:hover,
    .autocomplete-active {
        background-color: #e9e9e9;
    }
</style>

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1 class="dashboard-title">
            <i class="fas fa-tasks"></i> Tarefas Individuais
        </h1>
    </div>

    <div class="task-list" id="taskList"></div>

    <div class="task-actions mt-4">
        <button class="btn btn-success" onclick="openCreateModal()">Nova Tarefa</button>
    </div>
</div>

<!-- Modal Criar -->
<div id="createModal" class="modal-overlay">
    <div class="modal-content">
        <h3 class="popup-title">Nova Tarefa Individual</h3>
        <div class="form-group">
            <label>Nome da Tarefa:</label>
            <input type="text" id="taskName" class="form-input" autocomplete="off">
        </div>
        <div class="form-group">
            <label>Data e Hora de Início:</label>
            <input type="datetime-local" id="taskStart" class="form-input">
        </div>
        <div class="form-group">
            <label>Preço por Hora (€):</label>
            <input type="number" step="0.01" id="taskMoney" class="form-input">
        </div>
        <div class="form-actions">
            <button class="btn-primary" onclick="createTask()">Criar</button>
            <button class="btn-secondary" onclick="closeCreateModal()">Cancelar</button>
        </div>
    </div>
</div>

<!-- Modal Editar -->
<div id="editModal" class="modal-overlay">
    <div class="modal-content">
        <h3 class="popup-title">Editar Tarefa</h3>
        <div class="form-group">
            <label>Nome da Tarefa:</label>
            <input type="text" id="editTaskName" class="form-input" autocomplete="off">
        </div>
        <div class="form-group">
            <label>Data e Hora de Fim:</label>
            <input type="datetime-local" id="editTaskEnd" class="form-input">
        </div>
        <div class="form-group">
            <label>Preço por Hora (€):</label>
            <input type="number" step="0.01" id="editTaskMoney" class="form-input">
        </div>
        <div class="form-actions">
            <button class="btn-primary" onclick="saveEditedTask()">Guardar</button>
            <button class="btn-secondary" onclick="closeEditModal()">Cancelar</button>
        </div>
    </div>
</div>

<!-- Modal Partilhar -->
<div id="shareModal" class="modal-overlay">
    <div class="modal-content">
        <h3 class="popup-title">Exportar para Projeto</h3>
        <div class="form-group">
            <label>Pesquisar Projeto:</label>
            <div class="autocomplete">
                <input
                    type="text"
                    id="shareProjectName"
                    class="form-input"
                    placeholder="Comece a digitar..."
                    autocomplete="off"
                />
                <input type="hidden" id="shareProjectIdHidden" />
                <div id="shareAutocompleteList" class="autocomplete-items"></div>
            </div>
        </div>
        <div class="form-actions">
            <button class="btn-primary" onclick="confirmarPartilha()">Partilhar</button>
            <button class="btn-secondary" onclick="closeShareModal()">Cancelar</button>
        </div>
    </div>
</div>

<script>
    const apiUrl = '/api/TarefaIND';
    let editingTaskId = null;
    let sharingTaskId = null;

    window.onload = async function () {
        await loadTasks();
        // Garantir que modais começam escondidos
        document.getElementById('createModal').style.display = 'none';
        document.getElementById('editModal').style.display = 'none';
        document.getElementById('shareModal').style.display = 'none';
    };

    async function loadTasks() {
        try {
            const res = await fetch(apiUrl);
            const data = await res.json();

            let html = '';
            if (data.length === 0) {
                html = '<p class="text-muted">Nenhuma tarefa encontrada.</p>';
            } else {
                data.forEach(tarefa => {
                    html += `
                <div class="kanban-card shadow-sm p-2 mb-2 rounded d-flex justify-content-between align-items-center">
                    <div class="task-text">
                        <input type="checkbox">
                        <span>${tarefa.nomeTarefa}</span><br>
                        <small>Início: ${tarefa.dtInicio ?? '-'} ${tarefa.hrInicio ?? ''}</small><br>
                        <small>€${(tarefa.precoHora ?? 0).toFixed(2)}/h</small>
                    </div>
                    <div class="actions">
                        <button onclick="openEditModal(${tarefa.idTarefa}, '${tarefa.nomeTarefa}', ${tarefa.precoHora ?? 0})">
                            <i class="fas fa-pencil-alt"></i>
                        </button>
                        <button onclick="openShareModal(${tarefa.idTarefa})">
                            <i class="fas fa-share"></i>
                        </button>
                        <button onclick="deleteTask(${tarefa.idTarefa})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
                });
            }
            document.getElementById('taskList').innerHTML = html;
        } catch (e) {
            console.error("Erro ao carregar tarefas", e);
        }
    }

    function openCreateModal() {
        document.getElementById('taskName').value = '';
        document.getElementById('taskStart').value = '';
        document.getElementById('taskMoney').value = '';
        document.getElementById('createModal').style.display = 'flex';
    }

    function closeCreateModal() {
        document.getElementById('createModal').style.display = 'none';
    }

    async function createTask() {
        const nome = document.getElementById('taskName').value.trim();
        const dataHora = document.getElementById('taskStart').value;
        const preco = parseFloat(document.getElementById('taskMoney').value.replace(',', '.')) || 0;

        if (!nome) {
            alert('Insere o nome da tarefa.');
            return;
        }

        const agora = new Date().toISOString();
        const [dt, hr] = (dataHora || agora).split("T");

        const tarefaDTO = {
            nomeTarefa: nome,
            dtInicio: dt,
            hrInicio: hr.split('.')[0],
            precoHora: preco
        };

        try {
            const res = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(tarefaDTO)
            });

            if (!res.ok) throw new Error("Erro ao criar tarefa");

            closeCreateModal();
            await loadTasks();
        } catch (e) {
            console.error(e);
            alert('Erro ao criar tarefa.');
        }
    }

    function openEditModal(id, nome, preco) {
        editingTaskId = id;
        document.getElementById('editTaskName').value = nome;
        document.getElementById('editTaskMoney').value = preco;
        document.getElementById('editTaskEnd').value = '';
        document.getElementById('editModal').style.display = 'flex';
    }

    function closeEditModal() {
        editingTaskId = null;
        document.getElementById('editModal').style.display = 'none';
    }

    async function saveEditedTask() {
        const nome = document.getElementById('editTaskName').value.trim();
        const dataHora = document.getElementById('editTaskEnd').value;
        const preco = parseFloat(document.getElementById('editTaskMoney').value.replace(',', '.')) || 0;

        const [dtFim, hrFim] = dataHora ? dataHora.split("T") : [null, "00:00:00"];

        const tarefa = {
            nomeTarefa: nome,
            dtFim: dtFim,
            hrFim: hrFim,
            precoHora: preco
        };

        try {
            const res = await fetch(`${apiUrl}/AtualizarTarefa/${editingTaskId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(tarefa)
            });

            if (!res.ok) throw new Error("Erro ao editar tarefa");

            closeEditModal();
            await loadTasks();
        } catch (e) {
            console.error("Erro ao editar tarefa:", e);
            alert("Erro ao editar tarefa.");
        }
    }

    function openShareModal(id) {
        sharingTaskId = id;
        document.getElementById('shareProjectName').value = '';
        document.getElementById('shareProjectIdHidden').value = '';
        // limpa sugestões antigas
        document.getElementById('shareAutocompleteList').innerHTML = '';
        document.getElementById('shareModal').style.display = 'flex';
    }

    function closeShareModal() {
        sharingTaskId = null;
        document.getElementById('shareModal').style.display = 'none';
    }

    async function confirmarPartilha() {
        const novoProjetoId = document.getElementById('shareProjectIdHidden').value.trim();

        if (!novoProjetoId) {
            alert("Por favor selecione um projeto válido.");
            return;
        }

        try {
            const res = await fetch(`/api/TarefaIND/CopiarTarefa/${sharingTaskId}?idProjeto=${novoProjetoId}`, {
                method: 'POST',
            });

            if (!res.ok) throw new Error("Erro ao copiar tarefa");

            alert("Tarefa copiada com sucesso!");
            closeShareModal();
            await loadTasks();
        } catch (e) {
            console.error("Erro ao copiar tarefa:", e);
            alert("Erro ao copiar tarefa.");
        }
    }

    async function deleteTask(id) {
        if (!confirm('Tens certeza que queres apagar esta tarefa?')) return;

        try {
            const res = await fetch(`${apiUrl}/${id}`, { method: 'DELETE' });

            if (!res.ok) throw new Error('Erro ao apagar tarefa');

            await loadTasks();
        } catch (e) {
            console.error(e);
            alert('Erro ao apagar tarefa.');
        }
    }

    // ============================
    // Autocomplete para Compartilhar
    // ============================
    (function() {
        const input = document.getElementById('shareProjectName');
        const hiddenInput = document.getElementById('shareProjectIdHidden');
        const listContainer = document.getElementById('shareAutocompleteList');
        let currentFocus = -1;
        let itemsData = [];
        let lastTerm = '';

        input.addEventListener('input', function() {
            const term = this.value.trim();
            if (term.length < 2 || term === lastTerm) {
                removeShareListItems();
                return;
            }
            lastTerm = term;
            hiddenInput.value = '';

            fetch(`/api/Projeto/Autocomplete?term=${encodeURIComponent(term)}`, {
                method: 'GET',
                headers: { 'Accept': 'application/json' }
            })
                .then(res => {
                    if (!res.ok) throw new Error('Não foi possível carregar projetos');
                    return res.json();
                })
                .then(data => {
                    itemsData = data;
                    renderShareList(data);
                })
                .catch(err => {
                    console.error('Erro no autocomplete de projetos:', err);
                    removeShareListItems();
                });
        });

        function renderShareList(data) {
            removeShareListItems();
            if (!data.length) return;

            data.forEach((item, index) => {
                const itemDiv = document.createElement('div');
                itemDiv.classList.add('autocomplete-item');
                itemDiv.innerHTML = item.nomeProjeto;
                itemDiv.dataset.index = index;
                itemDiv.addEventListener('click', function() {
                    input.value = item.nomeProjeto;
                    hiddenInput.value = item.idProjeto;
                    removeShareListItems();
                });
                listContainer.appendChild(itemDiv);
            });
        }

        input.addEventListener('keydown', function(e) {
            let items = listContainer.getElementsByClassName('autocomplete-item');
            if (!items) return;

            if (e.key === 'ArrowDown') {
                currentFocus++;
                addActive(items);
                e.preventDefault();
            } else if (e.key === 'ArrowUp') {
                currentFocus--;
                addActive(items);
                e.preventDefault();
            } else if (e.key === 'Enter') {
                e.preventDefault();
                if (currentFocus > -1 && items[currentFocus]) {
                    items[currentFocus].click();
                }
            }
        });

        function addActive(items) {
            if (!items) return;
            removeActive(items);
            if (currentFocus >= items.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = items.length - 1;
            items[currentFocus].classList.add('autocomplete-active');
        }

        function removeActive(items) {
            for (let i = 0; i < items.length; i++) {
                items[i].classList.remove('autocomplete-active');
            }
        }

        function removeShareListItems() {
            while (listContainer.firstChild) {
                listContainer.removeChild(listContainer.firstChild);
            }
            currentFocus = -1;
        }

        document.addEventListener('click', function (e) {
            if (e.target !== input) {
                removeShareListItems();
            }
        });
    })();
</script>
