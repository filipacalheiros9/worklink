@{
    ViewBag.Title = "Minhas Equipas";
}
<style>
    body {
        font-family: Arial, sans-serif;
    }

    h2 {
        color: #2e7d32;
        margin-bottom: 20px;
    }

    .btn-custom {
        background-color: #2e7d32;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 6px;
        cursor: pointer;
        transition: background 0.2s;
    }

    .btn-custom:hover {
        background-color: #27642b;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 12px;
        background-color: #f8f8f8;
        margin-bottom: 12px;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        justify-content: center;
        align-items: center;
        z-index: 999;
    }

    .modal-content {
        background: white;
        border-radius: 14px;
        padding: 25px;
        width: 90%;
        max-width: 400px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        margin-bottom: 12px;
    }

    .d-flex {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .text-center {
        text-align: center;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }

    .gap-2 > * {
        margin-left: 8px;
    }

    #autocompleteResultados {
        max-height: 150px;
        overflow-y: auto;
        background: white;
        border: 1px solid #ccc;
        border-radius: 6px;
        margin-bottom: 10px;
    }

    #autocompleteResultados div {
        padding: 8px;
        cursor: pointer;
    }

    #autocompleteResultados div:hover {
        background-color: #eeeeee;
    }
</style>

<div class="container">
    <h2>Minhas Equipas</h2>
    <button id="btnAbrirModal" class="btn-custom" onclick="abrirModalCriarEquipa()">+ Criar Equipa</button>
    <div id="listaEquipas" class="mt-3"></div>
</div>

<!-- Modal Criar Equipa -->
<div id="modalCriarEquipa" class="modal">
    <div class="modal-content">
        <h4 class="text-center">Criar Nova Equipa</h4>
        <input type="text" id="nomeEquipa" placeholder="Nome da Equipa" class="form-control" />
        <button class="btn-custom" onclick="criarEquipa()">Salvar</button>
        <button class="btn btn-secondary mt-2" onclick="fecharModalCriarEquipa()">Cancelar</button>
    </div>
</div>

<!-- Modal Convite -->
<div id="modalConvite" class="modal">
    <div class="modal-content">
        <h4 class="text-center">Convidar Utilizador</h4>
        <input type="text" id="inputUsername" placeholder="Pesquisar utilizador..." class="form-control" autocomplete="off" />
        <div id="autocompleteResultados"></div>
        <textarea id="mensagemConvite" placeholder="Mensagem (opcional)" class="form-control"></textarea>
        <button class="btn-custom" onclick="enviarConvite()">Enviar</button>
        <button class="btn btn-secondary mt-2" onclick="fecharModalConvite()">Cancelar</button>
    </div>
</div>

<!-- Modal Membros -->
<div id="modalMembros" class="modal">
    <div class="modal-content">
        <h4 class="text-center">Membros da Equipa</h4>
        <ul id="listaMembros" class="list-group mb-3"></ul>
        <button class="btn btn-secondary mt-2" onclick="fecharModalMembros()">Fechar</button>
    </div>
</div>

<script>
    let equipaSelecionadaId = null;
    let usernameSelecionado = null;

    window.onload = async function () {
        await carregarEquipas();
    };

    async function carregarEquipas() {
        const container = document.getElementById("listaEquipas");
        container.innerHTML = "<p>A carregar...</p>";

        try {
            const res = await fetch("/api/Equipa/Minhas");
            const equipas = await res.json();

            if (!res.ok) throw new Error(equipas.message || "Erro");

            container.innerHTML = equipas.length === 0
                ? "<p>Não estás em nenhuma equipa.</p>"
                : equipas.map(e =>
                    `<div class="card">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>${e.nome}</strong><br/>
                                ${!e.isCriador ? '<small class="text-muted">Convidado</small>' : ''}
                            </div>
                            <div class="d-flex gap-2">
                                ${e.isCriador ? `<button class="btn btn-sm btn-custom" onclick="abrirModalConvite(${e.idEquipa})">Convidar</button>` : ''}
                                <a href="/Home/ProjetosEquipa?idEquipa=${e.idEquipa}" class="btn btn-sm btn-custom">Projetos</a>
                                <button class="btn btn-sm btn-secondary" onclick="abrirModalMembros(${e.idEquipa})">Membros</button>
                                ${e.isCriador ? `<button class="btn btn-sm btn-danger" onclick="apagarEquipa(${e.idEquipa})">Apagar</button>` : ''}
                            </div>
                        </div>
                    </div>`
                ).join('');
        } catch (err) {
            console.error(err);
            container.innerHTML = "<p>Erro ao carregar equipas.</p>";
        }
    }

    function abrirModalCriarEquipa() {
        document.getElementById("modalCriarEquipa").style.display = "flex";
    }

    function fecharModalCriarEquipa() {
        document.getElementById("modalCriarEquipa").style.display = "none";
    }

    async function criarEquipa() {
        const nome = document.getElementById("nomeEquipa").value.trim();
        if (!nome) return alert("Nome obrigatório");

        const res = await fetch("/api/Equipa/Criar", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ nome })
        });

        if (res.ok) {
            alert("Equipa criada!");
            fecharModalCriarEquipa();
            await carregarEquipas();
        } else {
            const erro = await res.json();
            alert(erro.message || "Erro ao criar equipa");
        }
    }

    function abrirModalConvite(idEquipa) {
        equipaSelecionadaId = idEquipa;
        usernameSelecionado = null;
        document.getElementById("inputUsername").value = "";
        document.getElementById("mensagemConvite").value = "";
        document.getElementById("autocompleteResultados").innerHTML = "";
        document.getElementById("modalConvite").style.display = "flex";
    }

    function fecharModalConvite() {
        document.getElementById("modalConvite").style.display = "none";
    }

    async function enviarConvite() {
        const mensagem = document.getElementById("mensagemConvite").value.trim();
        if (!usernameSelecionado || !equipaSelecionadaId) return alert("Seleciona um utilizador.");

        const res = await fetch("/api/Equipa/Convidar", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                usernameDestinatario: usernameSelecionado,
                mensagem,
                idEquipa: equipaSelecionadaId
            })
        });

        const data = await res.json();
        if (res.ok) {
            alert("Convite enviado.");
            fecharModalConvite();
        } else {
            alert(data.message || "Erro ao enviar convite.");
        }
    }

    document.getElementById('inputUsername').addEventListener('input', async function () {
        const query = this.value.trim();
        if (query.length < 2) {
            document.getElementById('autocompleteResultados').innerHTML = "";
            return;
        }

        const res = await fetch(`/api/Equipa/PesquisarUtilizador?query=${encodeURIComponent(query)}`);
        const data = await res.json();

        let html = '';
        data.forEach(user => {
            html += `<div onclick="selecionarUsername('${user.username}')">${user.username}</div>`;
        });

        document.getElementById('autocompleteResultados').innerHTML = html;
    });

    function selecionarUsername(username) {
        usernameSelecionado = username;
        document.getElementById("inputUsername").value = username;
        document.getElementById("autocompleteResultados").innerHTML = "";
    }

    function abrirModalMembros(idEquipa) {
        fetch(`/api/Equipa/GetMembros?id=${idEquipa}`)
            .then(res => res.json())
            .then(membros => {
                fetch("/api/Equipa/Minhas")
                    .then(r => r.json())
                    .then(minhasEquipas => {
                        const equipaAtual = minhasEquipas.find(e => e.idEquipa === idEquipa);
                        const souDono = equipaAtual?.isCriador;

                        const meuId = parseInt(document.getElementById("user-id").value); // input escondido com o ID atual
                        const ul = document.getElementById("listaMembros");

                        ul.innerHTML = membros.map(m => {
                            if (souDono && m.id !== meuId) {
                                return `<li class='list-group-item d-flex justify-content-between align-items-center'>
                                        ${m.nome}
                                        <button class='btn btn-sm btn-danger' onclick='removerMembro(${m.id}, ${idEquipa})'>Remover</button>
                                    </li>`;
                            } else if (!souDono && m.id === meuId) {
                                return `<li class='list-group-item d-flex justify-content-between align-items-center'>
                                        ${m.nome}
                                        <button class='btn btn-sm btn-secondary' onclick='removerMembro(${m.id}, ${idEquipa})'>Sair</button>
                                    </li>`;
                            } else {
                                return `<li class='list-group-item'>${m.nome}</li>`;
                            }
                        }).join("");

                        document.getElementById("modalMembros").style.display = "flex";
                    });
            });
    }



    function fecharModalMembros() {
        document.getElementById("modalMembros").style.display = "none";
    }

    function removerMembro(userId, equipaId) {
        if (confirm("Tem a certeza que quer remover este membro da equipa?")) {
            fetch('/api/Equipa/RemoverMembro', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, equipaId })
            }).then(() => {
                alert('Membro removido.');
                abrirModalMembros(equipaId);
            });
        }
    }

    async function apagarEquipa(id) {
        if (!confirm("Tens a certeza que queres apagar esta equipa? Isto eliminará também os projetos e tarefas associados.")) return;

        try {
            const res = await fetch(`/api/Equipa/Apagar/${id}`, { method: "DELETE" });
            const data = await res.json();
            if (res.ok) {
                alert(data.message || "Equipa apagada.");
                await carregarEquipas();
            } else {
                alert(data.message || "Erro ao apagar equipa.");
            }
        } catch (error) {
            console.error(error);
            alert("Erro inesperado ao apagar equipa.");
        }
    }

    window.addEventListener("click", function (e) {
        ["modalCriarEquipa", "modalConvite", "modalMembros"].forEach(id => {
            const modal = document.getElementById(id);
            if (e.target === modal) modal.style.display = "none";
        });
    });
    

</script>

<input type="hidden" id="user-id" value="@User.Claims.FirstOrDefault(c => c.Type == "id")?.Value" />
