@{
  ViewData["Title"] = "Tarefas";
  var projetoNome = ViewBag.NomeProjeto;
  var idProjeto = ViewBag.ProjetoId;
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
<link href="/css/Tarefas.css" rel="stylesheet" />

<div class="dashboard-container">
  <div class="dashboard-header">
    <h1 class="dashboard-title">
      <i class="fas fa-tasks"></i> Tarefas do Projeto: <span class="project-name">@projetoNome</span>
    </h1>
  </div>

  <!-- POPUP CRIAÇÃO -->
  <div id="popup" class="modal-overlay">
    <div class="modal-content">
      <h3 class="popup-title">Nova Tarefa</h3>
      <div class="form-group">
        <label for="popup-nome">Nome:</label>
        <input type="text" id="popup-nome" class="form-input" autocomplete="off">
      </div>

      <div class="form-group">
        <label for="popup-datetime">Data e hora de início:</label>
        <input type="datetime-local" id="popup-datetime" class="form-input" autocomplete="off">
        <small class="form-help">(Se vazio, a hora atual será usada)</small>
      </div>

      <div class="form-actions">
        <button onclick="confirmarPopup()" class="btn-primary">Confirmar</button>
        <button onclick="fecharPopup()" class="btn-secondary">Cancelar</button>
      </div>
    </div>
  </div>

  <!-- POPUP EDIÇÃO -->
  <div id="popup-editar" class="modal-overlay">
    <div class="modal-content">
      <h3 class="popup-title">Editar Tarefa</h3>
      <div class="form-group">
        <label for="edit-nome">Nome:</label>
        <input type="text" id="edit-nome" class="form-input">
      </div>
      <div class="form-group">
        <label for="edit-datetime">Data e hora de fim:</label>
        <input type="datetime-local" id="edit-datetime" class="form-input">
      </div>
      <div class="form-actions">
        <button onclick="confirmarEdicao()" class="btn-primary">Salvar</button>
        <button onclick="fecharPopupEditar()" class="btn-secondary">Cancelar</button>
      </div>
    </div>
  </div>

  <div class="kanban-board" id="kanbanBoard"></div>
</div>

<script>
  const idProjeto = @Html.Raw(Json.Serialize(ViewBag.ProjetoId)) || 0;
  const baseUrl = "/Tarefas";
  let colunaAlvo;
  let tarefaSendoEditada;

  // Drag and Drop aprimorado
  let draggingCard = null;

  window.onload = async () => {
    const colunas = ["A fazer", "Em progresso", "A testar", "Finalizado"];
    const refs = {};

    colunas.forEach(titulo => {
      const coluna = criarColuna(titulo);
      refs[titulo] = coluna.querySelector('.card-list');
    });

    try {
      const res = await fetch(`/Tarefas/MinhasTarefas/${idProjeto}`);
      if (!res.ok) throw new Error("Erro ao carregar tarefas.");
      const tarefas = await res.json();
      tarefas.forEach(t => {
        const el = criarCard(t.idTarefa, t.nomeTarefa, t.dtInicio);
        refs["A fazer"].appendChild(el);
      });
    } catch (e) {
      console.error(e);
      alert("Erro ao carregar tarefas.");
    }
  };

  function criarColuna(nome) {
    const board = document.getElementById('kanbanBoard');
    const coluna = document.createElement('div');
    coluna.className = 'kanban-column';

    coluna.innerHTML = `
        <h3>${nome}</h3>
        <div class="card-list"></div>
        <button class="add-task-btn">
            <i class="fas fa-plus"></i> Nova Tarefa
        </button>
    `;

    const lista = coluna.querySelector('.card-list');

    // Eventos de drag and drop aprimorados
    lista.addEventListener('dragenter', (e) => {
      e.preventDefault();
      lista.classList.add('drag-over');
    });

    lista.addEventListener('dragleave', (e) => {
      e.preventDefault();
      lista.classList.remove('drag-over');
    });

    lista.addEventListener('dragover', (e) => {
      e.preventDefault();
    });

    lista.addEventListener('drop', (e) => {
      e.preventDefault();
      lista.classList.remove('drag-over');
      const id = e.dataTransfer.getData("text/plain");
      const card = document.getElementById(id);
      if (card && !lista.contains(card)) {
        lista.appendChild(card);
        card.classList.add('highlight-animation');
        setTimeout(() => card.classList.remove('highlight-animation'), 1500);
      }
    });

    const botao = coluna.querySelector('.add-task-btn');
    botao.onclick = () => {
      colunaAlvo = coluna;
      abrirPopupCriacao();
    };

    board.appendChild(coluna);
    return coluna;
  }

  function criarCard(id, texto, data) {
    const card = document.createElement('div');
    card.className = 'kanban-card';
    card.id = `tarefa-${id}`;
    card.draggable = true;

    // Eventos de drag and drop aprimorados
    card.addEventListener('dragstart', (e) => {
      draggingCard = card;
      e.dataTransfer.setData("text/plain", card.id);
      setTimeout(() => card.style.opacity = '0.4', 0);
    });

    card.addEventListener('dragend', () => {
      draggingCard = null;
      card.style.opacity = '1';
    });

    card.innerHTML = `
        <input type="checkbox" title="Iniciado em: ${new Date(data).toLocaleString()}">
        <span class="task-text">${texto}</span>
        <div class="actions">
            <button title="Editar"><i class="fas fa-pencil-alt"></i></button>
            <button title="Apagar"><i class="fas fa-trash"></i></button>
        </div>
    `;

    const editarBtn = card.querySelectorAll('button')[0];
    editarBtn.onclick = (e) => {
      e.stopPropagation();
      tarefaSendoEditada = card;
      document.getElementById('edit-nome').value = texto;
      document.getElementById('edit-datetime').value = '';
      document.getElementById('popup-editar').style.display = 'flex';
    };

    const apagarBtn = card.querySelectorAll('button')[1];
    apagarBtn.onclick = (e) => {
      e.stopPropagation();
      if (confirm("Tem certeza que deseja excluir esta tarefa?")) {
        excluirTarefa(id, card);
      }
    };

    return card;
  }

  async function excluirTarefa(id, card) {
    try {
      const res = await fetch(`/Tarefas/EliminarTarefa/${id}`, { method: 'DELETE' });
      if (!res.ok) {
        let msg = "Erro ao eliminar tarefa.";
        try {
          const err = await res.json();
          msg = err.message || msg;
        } catch (_) { }
        throw new Error(msg);
      }

      // Efeito de fade out ao remover
      card.style.transition = 'all 0.3s';
      card.style.opacity = '0';
      card.style.transform = 'scale(0.8)';
      setTimeout(() => card.remove(), 300);
    } catch (e) {
      alert(e.message);
    }
  }

  function abrirPopupCriacao() {
    document.getElementById('popup-nome').value = '';
    document.getElementById('popup-datetime').value = '';
    document.getElementById('popup').style.display = 'flex';
    document.getElementById('popup-nome').focus();
  }

  function fecharPopup() {
    document.getElementById('popup').style.display = 'none';
  }

  async function confirmarPopup() {
    const nome = document.getElementById('popup-nome').value.trim();
    const dataHora = document.getElementById('popup-datetime').value;
    if (!nome) {
      document.getElementById('popup-nome').focus();
      return;
    }

    const agora = new Date().toISOString();
    const [dt, hr] = (dataHora || agora).split("T");

    const tarefaDTO = {
      nomeTarefa: nome,
      dtInicio: dt,
      hrInicio: hr ? hr.split('.')[0] : '00:00:00',
      idProjeto: idProjeto
    };

    try {
      const res = await fetch('/Tarefas/CriarTarefa', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(tarefaDTO)
      });

      if (!res.ok) {
        let erro = await res.json().catch(() => ({}));
        throw new Error(erro.message || "Erro ao criar tarefa");
      }

      const data = await res.json();
      const card = criarCard(data.idTarefa, data.nomeTarefa, data.dtInicio);

      // Adiciona a tarefa com uma animação
      colunaAlvo.querySelector('.card-list').appendChild(card);
      card.style.opacity = '0';
      card.style.transform = 'translateY(-20px)';

      setTimeout(() => {
        card.style.transition = 'all 0.5s';
        card.style.opacity = '1';
        card.style.transform = 'translateY(0)';
        card.classList.add('highlight-animation');
      }, 10);

      fecharPopup();
    } catch (e) {
      alert(e.message);
      console.error("Erro ao criar tarefa:", e);
    }
  }

  function fecharPopupEditar() {
    document.getElementById('popup-editar').style.display = 'none';
  }

  async function confirmarEdicao() {
    const novoNome = document.getElementById('edit-nome').value.trim();
    const dataHora = document.getElementById('edit-datetime').value;
    if (!novoNome || !tarefaSendoEditada) {
      document.getElementById('edit-nome').focus();
      return;
    }

    const id = tarefaSendoEditada.id.replace("tarefa-", "");
    const [dtFim, hrFim] = dataHora ? dataHora.split("T") : [null, "00:00:00"];

    const tarefa = {
      nomeTarefa: novoNome,
      dtInicio: null,
      hrInicio: "00:00:00",
      dtFim: dtFim,
      hrFim: hrFim ? hrFim : "00:00:00",
      idProjeto: idProjeto
    };

    try {
      const res = await fetch(`/Tarefas/AtualizarTarefa/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(tarefa)
      });

      if (!res.ok) throw new Error("Erro ao atualizar tarefa");

      tarefaSendoEditada.querySelector('.task-text').textContent = novoNome;
      if (dataHora) {
        tarefaSendoEditada.setAttribute("title", "Finaliza em: " + new Date(dataHora).toLocaleString());
      }

      // Destaca a tarefa atualizada
      tarefaSendoEditada.classList.add('highlight-animation');
      setTimeout(() => tarefaSendoEditada.classList.remove('highlight-animation'), 1500);

      fecharPopupEditar();
    } catch (e) {
      alert(e.message);
    }
  }

  // Adiciona eventos de teclado para facilitar o uso dos modais
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      if (document.getElementById('popup').style.display === 'flex') {
        fecharPopup();
      }
      if (document.getElementById('popup-editar').style.display === 'flex') {
        fecharPopupEditar();
      }
    }

    if (e.key === 'Enter' && e.ctrlKey) {
      if (document.getElementById('popup').style.display === 'flex') {
        confirmarPopup();
      }
      if (document.getElementById('popup-editar').style.display === 'flex') {
        confirmarEdicao();
      }
    }
  });
</script>