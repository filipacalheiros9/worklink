@{
  ViewData["Title"] = "Tarefas";
  var projetoNome = ViewBag.NomeProjeto;
}
<div style="display: flex; justify-content: space-between; align-items: center; margin: 30px 20px 20px;">
  <h1 style="margin: 0; font-size: 2rem; color: #198754; display: flex; align-items: center; gap: 10px;">
    <i class="fas fa-tasks" style="font-size: 1.5em;"></i> Tarefas do Projeto: <span style="color: #333;">@projetoNome</span>
  </h1>
</div>

<!-- POPUP -->
<div id="popup" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); justify-content:center; align-items:center;">
  <div style="background:#fff; padding:20px; border-radius:10px; width:300px; text-align:left;">
    <h3 id="popup-title" style="text-align: center;"></h3>

    <label for="popup-input" style="margin-top:10px; display:block; font-weight: bold;">Nome:</label>
    <input type="text" id="popup-input" style="width:100%; padding:8px;">

    <div id="datetime-container" style="display:none; flex-direction: column; gap: 8px; margin-top: 10px;">
      <label for="datetime-input" style="font-weight: bold;">Data e hora de início:</label>
      <input type="datetime-local" id="datetime-input" style="padding:8px; width:100%;">
      <small style="color:#555">(Se vazio, a hora atual será usada)</small>
    </div>

    <div style="margin-top:15px; text-align: center;">
      <button onclick="confirmarPopup()" style="margin-right:10px; padding:6px 12px; background-color:#198754; color:#fff; border:none; border-radius:5px;">OK</button>
      <button onclick="fecharPopup()" style="padding:6px 12px; background-color:#ccc; border:none; border-radius:5px;">Cancelar</button>
    </div>
  </div>
</div>


<style>
  body {
    background-color: #f4f4f4;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  .kanban-board {
    display: flex;
    gap: 20px;
    overflow-x: auto;
    padding: 30px 20px;
    align-items: flex-start;
  }
  .kanban-column {
    background-color: #1e1e1e;
    color: white;
    border-radius: 10px;
    min-width: 280px;
    padding: 15px;
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  .kanban-column h3 {
    text-align: center;
    margin-bottom: 15px;
    border-bottom: 1px solid #444;
    padding-bottom: 5px;
  }
  .card-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
    min-height: 30px;
    flex-grow: 1;
  }
  .kanban-card {
    background-color: #ffffff;
    color: #333;
    padding: 12px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    font-size: 14px;
    line-height: 1.5;
    transition: transform 0.2s;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
  }
  .kanban-card input[type="checkbox"] {
    margin-right: 8px;
  }
  .kanban-card .task-text {
    flex: 1;
  }
  .kanban-card:hover {
    transform: scale(1.02);
  }
  .kanban-card .actions {
    display: none;
    gap: 6px;
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
  }
  .kanban-card:hover .actions {
    display: flex;
  }
  .kanban-card button {
    background: transparent;
    border: none;
    color: #666;
    cursor: pointer;
    font-size: 14px;
  }
  .kanban-card button:hover {
    color: #000;
  }
</style>

<!-- QUADRO KANBAN -->
<div class="kanban-board" id="kanbanBoard"></div>

<script>
let tipoAtual = '';
let callbackPopup;
let colunaAlvo;

const idProjeto = @ViewBag.ProjetoId;

window.onload = async () => {
  // Criar as colunas padrão
  adicionarColuna("A fazer");
  adicionarColuna("Em progresso");
  adicionarColuna("A testar");
  adicionarColuna("Finalizado");

  const res = await fetch(`/Tarefas/projeto/${idProjeto}`);
  const tarefas = await res.json();

  // Adicionar as tarefas existentes à primeira coluna (A fazer)
  const primeiraColuna = document.querySelector('.card-list');
  tarefas.forEach(t => {
    const tarefaEl = criarCardTarefa(t.nomeTarefa, t.dtInicio);
    primeiraColuna.appendChild(tarefaEl);
  });
};

function abrirPopup(tipo, callback = null, alvo = null) {
  tipoAtual = tipo;
  callbackPopup = callback;
  colunaAlvo = alvo;
  document.getElementById('popup-input').value = '';
  document.getElementById('datetime-input').value = '';
  document.getElementById('popup-title').textContent = tipo === 'coluna' ? 'Nova Coluna' : 'Nova Tarefa';
  document.getElementById('datetime-container').style.display = tipo === 'tarefa' ? 'flex' : 'none';
  document.getElementById('popup').style.display = 'flex';
}

function fecharPopup() {
  document.getElementById('popup').style.display = 'none';
}

function confirmarPopup() {
  const valorTexto = document.getElementById('popup-input').value.trim();
  const dataHora = document.getElementById('datetime-input').value;
  if (!valorTexto) return;
  const dateNow = new Date().toISOString();
  const dataUsada = dataHora || dateNow;
  if (callbackPopup) callbackPopup(valorTexto, colunaAlvo, dataUsada);
  fecharPopup();
}

function adicionarColuna(nomeColuna) {
  const board = document.getElementById('kanbanBoard');

  const coluna = document.createElement('div');
  coluna.className = 'kanban-column';

  const titulo = document.createElement('h3');
  titulo.textContent = nomeColuna;

  const lista = document.createElement('div');
  lista.className = 'card-list';
  lista.ondragover = e => e.preventDefault();
  lista.ondrop = e => {
    e.preventDefault();
    const id = e.dataTransfer.getData("text/plain");
    const el = document.getElementById(id);
    if (el && !lista.contains(el)) lista.appendChild(el);
  };

  const botaoAddTarefa = document.createElement('button');
  botaoAddTarefa.textContent = '+ Tarefa';
  botaoAddTarefa.style.marginTop = '10px';
  botaoAddTarefa.style.width = '100%';
  botaoAddTarefa.style.padding = '6px';
  botaoAddTarefa.style.backgroundColor = '#198754';
  botaoAddTarefa.style.color = 'white';
  botaoAddTarefa.style.border = 'none';
  botaoAddTarefa.style.borderRadius = '6px';
  botaoAddTarefa.style.cursor = 'pointer';

  botaoAddTarefa.onclick = function() {
    abrirPopup('tarefa', (nomeTarefa, coluna, dataInicio) => {
      const tarefa = criarCardTarefa(nomeTarefa, dataInicio);
      coluna.querySelector('.card-list').appendChild(tarefa);
    }, coluna);
  };

  coluna.appendChild(titulo);
  coluna.appendChild(lista);
  coluna.appendChild(botaoAddTarefa);
  board.appendChild(coluna);
}

let tarefaId = 0;
function criarCardTarefa(texto, dataHora) {
  const card = document.createElement('div');
  card.className = 'kanban-card';
  card.draggable = true;
  card.id = `tarefa-${tarefaId++}`;

  card.ondragstart = e => {
    e.dataTransfer.setData("text/plain", card.id);
  };

  const check = document.createElement('input');
  check.type = 'checkbox';
  check.title = 'Iniciado em: ' + new Date(dataHora).toLocaleString();

  const span = document.createElement('span');
  span.className = 'task-text';
  span.textContent = texto;

  const actions = document.createElement('div');
  actions.className = 'actions';

  const editar = document.createElement('button');
  editar.innerHTML = '<i class="fas fa-pen"></i>';
  editar.onclick = () => abrirPopup('tarefa', (novoTexto) => {
    if (novoTexto) span.textContent = novoTexto;
  });

  const apagar = document.createElement('button');
  apagar.innerHTML = '<i class="fas fa-trash"></i>';
  apagar.onclick = () => card.remove();

  actions.appendChild(editar);
  actions.appendChild(apagar);

  card.appendChild(check);
  card.appendChild(span);
  card.appendChild(actions);

  return card;
}
</script>