<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Meus Projetos</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: #ffffff;
      color: #000;
      margin: 0;
      padding: 0;
    }

    .container {
      width: 100%;
      max-width: 1200px;
      padding: 40px 20px;
      margin: 0 auto;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 30px;
    }

    .header h2 {
      font-size: 2rem;
      font-weight: 600;
      color: #198754;
    }

    .project-list {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .project-item {
      background-color: #f9fbff;
      border: 1px solid #d8e2ef;
      border-left: 6px solid #198754;
      border-radius: 12px;
      padding: 20px;
      transition: all 0.3s ease;
    }

    .project-item:hover {
      transform: scale(1.015);
      box-shadow: 0 6px 24px rgba(25, 135, 84, 0.15);
    }

    .project-item strong {
      font-size: 1.25rem;
    }

    .project-item span {
      display: block;
      margin-top: 6px;
      font-size: 0.95rem;
      color: #444;
    }

    .actions {
      display: flex;
      gap: 10px;
      align-items: center;
      margin-top: 8px;
    }

    .btn {
      background-color: #198754;
      color: #fff;
      border: none;
      padding: 10px 14px;
      border-radius: 8px;
      font-size: 0.95rem;
      font-weight: 500;
      cursor: pointer;
      display: inline-flex;
      justify-content: center;
      align-items: center;
      gap: 6px;
      transition: background-color 0.2s ease;
      box-shadow: 0 4px 12px rgba(25, 135, 84, 0.2);
    }

    .btn:hover {
      background-color: #157347;
    }

    .cancel-btn {
      background-color: #fff;
      color: #000;
      border: 1px solid #000;
    }

    .cancel-btn:hover {
      background-color: #f8f8f8;
    }

    .fa-pen-to-square,
    .fa-trash {
      font-size: 1.1rem;
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .fa-pen-to-square:hover {
      color: #198754;
      transform: scale(1.2);
    }

    .fa-trash {
      color: #d63031;
    }

    .fa-trash:hover {
      transform: scale(1.2);
    }

    .popup,
    .edit-popup {
      background-color: #ffffff;
      padding: 30px 25px;
      border-radius: 16px;
      position: fixed;
      top: 50%;
      left: 50%;
      width: 90%;
      max-width: 440px;
      transform: translate(-50%, -50%);
      z-index: 20;
      display: none;
      box-shadow: 0 12px 40px rgba(0, 0, 0, 0.25);
      animation: fadeInScale 0.3s ease-in-out;
      color: #000;
    }

    .popup h2,
    .edit-popup h2 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #000;
      margin-bottom: 20px;
      text-align: center;
    }

    .popup form,
    .edit-popup form {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    label {
      font-size: 0.95rem;
      font-weight: 500;
      margin-bottom: 4px;
    }

    input[type="text"],
    input[type="number"] {
      width: 100%;
      padding: 12px 16px;
      border: 1px solid #00000033;
      border-radius: 10px;
      font-size: 1rem;
      transition: border-color 0.2s ease;
      color: #000;
      background-color: #fff;
    }

    input[type="text"]:focus,
    input[type="number"]:focus {
      border-color: #000;
      outline: none;
      box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
    }
    

    .popup-overlay {
      position: fixed;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      background: rgba(0, 0, 0, 0.4);
      display: none;
      z-index: 10;
    }
  </style>
</head>
<body>

<div class="container">
  <div class="header">
    <h2><i class="fas fa-folder me-2"></i> Meus Projetos</h2>
    <button class="btn" id="createProjectBtn">
      <i class="fa-solid fa-plus"></i> Criar Projeto
    </button>
  </div>
  <div class="project-list" id="projectList"></div>
</div>

<div class="popup-overlay" id="popupOverlay"></div>

<div class="popup" id="popup">
  <h2>Criar Projeto</h2>
  <form id="createProjectForm">
    <label for="nomeProjeto">Nome do Projeto</label>
    <input type="text" id="nomeProjeto" required>

    <label for="nomeCliente">Nome do Cliente</label>
    <input type="text" id="nomeCliente" required>

    <label for="precoHora">Preço por Hora (€)</label>
    <input type="number" id="precoHora" required>

    <button type="submit" class="btn">Salvar</button>
    <button type="button" class="btn cancel-btn" id="cancelBtn">Cancelar</button>
  </form>
</div>

<div class="edit-popup" id="editPopup">
  <h2>Editar Projeto</h2>
  <form id="editProjectForm">
    <input type="hidden" id="editIdProjeto">

    <label for="editNomeProjeto">Nome do Projeto</label>
    <input type="text" id="editNomeProjeto" required>

    <label for="editNomeCliente">Nome do Cliente</label>
    <input type="text" id="editNomeCliente" required>

    <label for="editPrecoHora">Preço por Hora (€)</label>
    <input type="number" id="editPrecoHora" required>

    <button type="submit" class="btn">Atualizar</button>
    <button type="button" class="btn cancel-btn" onclick="fecharEditModal()">Cancelar</button>
  </form>
</div>

<script>
let projetos = [];

function criarElementoProjeto(projeto) {
  const div = document.createElement('div');
  div.className = 'project-item';
  div.innerHTML = `
    <strong>${projeto.nomeProjeto}</strong>
    <span>Cliente: ${projeto.nomeCliente}</span>
    <span>Preço/hora: €${projeto.precoHora.toFixed(2)}</span>
    <div class="actions">
      <button class="btn" onclick="irParaTarefas(${projeto.idProjeto})">
        <i class="fa-solid fa-list-check"></i> Tarefas
      </button>
      <i class="fa-solid fa-pen-to-square" title="Editar" onclick="abrirEditModal(${projeto.idProjeto})"></i>
      <i class="fa-solid fa-trash" title="Eliminar" onclick="eliminarProjeto(${projeto.idProjeto})"></i>
    </div>
  `;
  return div;
}

function mostrarProjetos() {
  const divProjetos = document.getElementById('projectList');
  divProjetos.innerHTML = '';
  projetos.forEach(proj => {
    const elementoProjeto = criarElementoProjeto(proj);
    divProjetos.appendChild(elementoProjeto);
  });
}

function abrirModal() {
  document.getElementById('popup').style.display = 'block';
  document.getElementById('popupOverlay').style.display = 'block';
}

function fecharModal() {
  document.getElementById('popup').style.display = 'none';
  document.getElementById('popupOverlay').style.display = 'none';
  document.getElementById('createProjectForm').reset();
}

function fecharEditModal() {
  document.getElementById('editPopup').style.display = 'none';
  document.getElementById('popupOverlay').style.display = 'none';
  document.getElementById('editProjectForm').reset();
}

async function criarProjeto(event) {
  event.preventDefault();
  const nomeProjeto = document.getElementById('nomeProjeto').value.trim();
  const nomeCliente = document.getElementById('nomeCliente').value.trim();
  const precoHora = parseFloat(document.getElementById('precoHora').value);
  const projetoData = { nomeProjeto, nomeCliente, precoHora };

  const response = await fetch('/api/Projeto/CriarProjeto', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify(projetoData)
  });

  if (response.ok) {
    await carregarProjetosDoUtilizador();
    fecharModal();
    alert('Projeto criado com sucesso!');
  } else {
    alert('Erro ao criar projeto.');
  }
}

async function carregarProjetosDoUtilizador() {
  const response = await fetch('/api/Projeto/MeusProjetos', {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include'
  });

  if (response.ok) {
    projetos = await response.json();
    mostrarProjetos();
  } else {
    alert('Erro ao carregar projetos.');
  }
}

async function abrirEditModal(idProjeto) {
  const projeto = projetos.find(p => p.idProjeto === idProjeto);
  if (!projeto) return;

  document.getElementById('editIdProjeto').value = projeto.idProjeto;
  document.getElementById('editNomeProjeto').value = projeto.nomeProjeto;
  document.getElementById('editNomeCliente').value = projeto.nomeCliente;
  document.getElementById('editPrecoHora').value = projeto.precoHora;

  document.getElementById('editPopup').style.display = 'block';
  document.getElementById('popupOverlay').style.display = 'block';
}

async function atualizarProjeto(event) {
  event.preventDefault();
  const id = document.getElementById('editIdProjeto').value;
  const nomeProjeto = document.getElementById('editNomeProjeto').value.trim();
  const nomeCliente = document.getElementById('editNomeCliente').value.trim();
  const precoHora = parseFloat(document.getElementById('editPrecoHora').value);
  const projetoData = { nomeProjeto, nomeCliente, precoHora };

  const response = await fetch(`/api/Projeto/AtualizarProjeto/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify(projetoData)
  });

  if (response.ok) {
    await carregarProjetosDoUtilizador();
    fecharEditModal();
    alert('Projeto atualizado com sucesso!');
  } else {
    alert('Erro ao atualizar projeto.');
  }
}

async function eliminarProjeto(idProjeto) {
  if (!confirm("Tens a certeza que queres eliminar este projeto?")) return;

  try {
    const response = await fetch(`/api/Projeto/EliminarProjeto/${idProjeto}`, {
      method: 'DELETE',
      credentials: 'include'
    });

    if (response.ok) {
      await carregarProjetosDoUtilizador();
      alert('Projeto eliminado com sucesso!');
    } else {
      const erro = await response.text();
      alert('Erro ao eliminar projeto: ' + erro);
    }
  } catch (error) {
    console.error('Erro ao eliminar projeto:', error);
    alert('Erro inesperado ao eliminar.');
  }
}

function irParaTarefas(idProjeto) {
  window.location.href = `/Tarefas?projetoId=${idProjeto}`;
}

document.getElementById('createProjectBtn').addEventListener('click', abrirModal);
document.getElementById('cancelBtn').addEventListener('click', fecharModal);
document.getElementById('popupOverlay').addEventListener('click', () => {
  fecharModal();
  fecharEditModal();
});
document.getElementById('createProjectForm').addEventListener('submit', criarProjeto);
document.getElementById('editProjectForm').addEventListener('submit', atualizarProjeto);

window.onload = carregarProjetosDoUtilizador;
</script>

</body>
</html>
